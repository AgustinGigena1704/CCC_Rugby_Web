@using MudBlazor
@inject INotificationService NotificationService
@inject IDialogService DialogService
@using System.Reflection
@using System.Security.Claims
@inherits LayoutComponentBase
@inject NavigationManager navManager
@inject AuthService authService
@inject HttpClient HttpClient
@inject IUserContextService UserContextService
@inject ISnackbar Snackbar
@implements IDisposable

<MudThemeProvider IsDarkMode="true" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<AuthorizeView>
    <MudLayout Style="height:100dvh;" Class="flex-grow-1">
        <MudAppBar Elevation="1">
            <MudIconButton 
                Icon="@Icons.Material.Filled.Menu"
                Color="Color.Inherit"
                Edge="Edge.Start"
                OnClick="@ToggleDrawer" />
            <MudSpacer />
            <MudText Class="mr-4">@context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value.ToString()</MudText>
            <MudMenu 
                ActivationEvent="@MouseEvent.LeftClick" 
                AnchorOrigin="Origin.BottomCenter" 
                TransformOrigin="Origin.TopCenter"
                Class="mr-4"
                >
                <ActivatorContent>
                    <MudAvatar>
                        @if (isLoadingAvatar)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        }
                        else if (!string.IsNullOrEmpty(avatarUrl))
                        {
                            <MudImage ObjectFit="ObjectFit.Cover" Src="@avatarUrl" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Person" />
                        }
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudNavLink Href="Cuenta/Perfil" Icon="@Icons.Material.Filled.AccountCircle">Perfil</MudNavLink>
                </ChildContent>
            </MudMenu>

        </MudAppBar>
        <MudDrawer 
            @bind-Open="@_open"
            Elevation="1"
            Variant="DrawerVariant.Temporary"
            Class="mr-4"
            >
            <MudDrawerHeader>
                <MudImage 
                    Alt="Logo del Club Ciudad de Campana"
                    Src="images/ciudad_de_campana.png"
                    Style="max-width:20%" />
                <MudDivider Vertical="true" FlexItem="true" />
                <MudText Style="position: absolute; margin-left:25%;" Typo="Typo.h6">CCC App</MudText>
            </MudDrawerHeader>
            <MudNavMenu Margin="Margin.Dense" Rounded="true" Class=" pa-2 d-flex flex-column" Style="height:100%;">
                <MudNavLink Icon="@Icons.Material.Filled.Home" Href="" Style="color:inherit; text-decoration:none;">
                    Inicio
                </MudNavLink>
                <MudDivider Style="max-height:1px" />
                @if (menuLoaded)
                {
                    foreach (var group in menu.MenuGrupos)
                    {
                        <MudNavGroup Title="@group.Nombre" Icon="@group.Icono">
                            @foreach (var item in group.MenuItems)
                            {
                                <MudNavLink Href="@item.Url" Icon="@item.Icono">
                                    @item.Nombre
                                </MudNavLink>
                            }
                        </MudNavGroup>
                    }
                    <MudDivider Class="flex-grow-1" Style="background-color:transparent;" />
                }
                else
                {
                    <MudDivider Class="flex-grow-1" Style="background-color:transparent;" />
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-2 mb-2" />
                    <MudText Align="Align.Center">Cargando menú...</MudText>
                    <MudDivider Class="flex-grow-1" Style="background-color:transparent;" />
                }

                <MudDivider Style="max-height:1px" />
                <MudButton Variant="Variant.Text"
                           Style="min-height: 40px"
                           Color="Color.Inherit"
                           StartIcon="@Icons.Material.Filled.Logout"
                           FullWidth="true"
                           OnClick="@LogOut">
                    Cerrar Sesion
                </MudButton>
                <MudDivider Style="max-height:1px" />
                <MudButton Variant="Variant.Text"
                           Style="min-height: 40px"
                           Color="Color.Inherit"
                           Disabled="true"
                           FullWidth="true">
                    Version: @appVersion
                </MudButton>
            </MudNavMenu>
        </MudDrawer>
        <MudMainContent Class="d-flex flex-grow-1 overflow-auto">
            <MudContainer MaxWidth="MaxWidth.False" Class="pa-4 d-flex flex-column flex-grow-1">
                <br />
                <ErrorBoundary>
                    @Body
                </ErrorBoundary>
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</AuthorizeView>

@code {
    private bool _open = false;
    private bool menuLoaded = false;
    private string avatarUrl = "";
    private bool isLoadingAvatar = true;
    private Usuario? ActualUser;
    private MenuDTO menu = new MenuDTO();

    private string appVersion = Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? "0.0.1";

    protected override async Task OnInitializedAsync()
    {
        // Inicializar el servicio de notificaciones con el Snackbar y el DialogService
        NotificationService.SetSnackbar(Snackbar);
        NotificationService.SetDialogService(DialogService);

        ActualUser = await UserContextService.GetActualUserAsync();
        if(ActualUser != null)
        {
            await LoadMenu();
            await LoadUserAvatar();
        }
    }

    private async Task LoadMenu()
    {
        menuLoaded = false;
        StateHasChanged();
        try
        {   
            if (ActualUser != null)
            {
                var responsex = await HttpClient.GetAsync("/api/Menu/GetMainMenu/mainmenu");
                if (responsex.IsSuccessStatusCode)
                {
                    menu = await responsex.Content.ReadFromJsonAsync<MenuDTO>() ?? new MenuDTO();
                }
                else
                {
                    throw new Exception(responsex.ReasonPhrase ?? "Error desconocido");  
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error cargando el menú de navegación.", descripcion: ex.Message);
        }
        finally
        {
            menuLoaded = true;
            StateHasChanged();
        }
    }

    private async Task LoadUserAvatar()
    {
        try
        {
            isLoadingAvatar = true;
            StateHasChanged();
            if (ActualUser != null)
            {
                var response = await HttpClient.GetAsync($"api/Usuario/GetAvatar/{ActualUser.Id}");

                if (response.IsSuccessStatusCode)
                {
                    var avatarData = await response.Content.ReadFromJsonAsync<Archivo>();
                    if (avatarData != null && avatarData.bytes != null)
                    {
                        var mimeType = GetMimeType(avatarData.Extension);
                        avatarUrl = $"data:{mimeType};base64,{avatarData.Base64}";
                    }
                }
                else if (response.StatusCode != System.Net.HttpStatusCode.NotFound)
                {
                    throw new Exception(response.ReasonPhrase);
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error cargando el avatar del usuario", descripcion: ex.Message);
        }
        finally
        {
            isLoadingAvatar = false;
            StateHasChanged();
        }
    }

    private string GetMimeType(string extension)
    {
        return extension.ToLower() switch
        {
            "jpg" or "jpeg" => "image/jpeg",
            "png" => "image/png",
            "gif" => "image/gif",
            "webp" => "image/webp",
            "svg" => "image/svg+xml",
            _ => "image/jpeg" // Default
        };
    }

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    private async void LogOut()
    {
        try
        {
            await authService.LogOutAsync();
            navManager.NavigateTo("/Auth/Login");
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error al cerrar sesión.", descripcion: ex.Message);
        }
    }

    // Método público para refrescar el avatar cuando se actualize
    public async Task RefreshAvatar()
    {
        await LoadUserAvatar();
    }

    public void Dispose()
    {
        // Cleanup si es necesario
    }
}