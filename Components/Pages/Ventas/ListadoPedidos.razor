@page "/Ventas/Listados"
@using CCC_Rugby_Web.Utilities
@layout MainLayout
@attribute [Authorize]



<CustomView Roles="pedidos">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-4 d-flex flex-column" Style="height: 100%; overflow: hidden;">
        <MudText>@CurrentPage.ToString()</MudText>
        <MudPaper Class="pa-4 mb-4" Style="flex-shrink: 0;">
            <MudGrid Spacing="5" Class="width:100%; justify-start justify-md-center" Style="align-items:center">
                <MudItem xs="12" sm="6" md="3" Class="d-flex align-center">
                    <MudSelect Variant="Variant.Filled" FitContent="true" Disabled="@LoadingService.IsLoading" T="TipoArticuloDTO" @bind-Value="tipoSeleccionado" Label="Listado" Style="min-width:200px" Class="ma-2">
                        <MudSelectItem T="TipoArticuloDTO" Value="@tipoDefault">@tipoDefault.Nombre</MudSelectItem>
                        @foreach (TipoArticuloDTO tipo in tipoArticulos)
                        {
                            <MudSelectItem T="TipoArticuloDTO" Value="@tipo">@tipo.Nombre</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="2" Class="d-flex align-center">
                    <MudDatePicker Label="Fecha Inicio" Variant="Variant.Filled" Disabled="@LoadingService.IsLoading" @bind-Date="inicio" />
                </MudItem>
                <MudItem xs="12" sm="6" md="2" Class="d-flex align-center">
                    <MudDatePicker Label="Fecha Fin" Variant="Variant.Filled" Disabled="@LoadingService.IsLoading" @bind-Date="fin" />
                </MudItem>
                <MudItem xs="4" sm="3" md="2" Class="d-flex align-center">
                    <MudIconButton Style="height:fit-content" Color="Color.Primary" Disabled="@LoadingService.IsLoading" Variant="Variant.Filled" Icon="@Icons.Material.Filled.FilterAlt" />
                </MudItem>
                <MudItem xs="4" sm="1" md="1" Class="d-flex align-center">
                    <MudIconButton Style="height:fit-content" Color="Color.Primary" Disabled="@LoadingService.IsLoading" Variant="Variant.Filled" OnClick="ReloadTable" Icon="@Icons.Material.Filled.Search" />
                </MudItem>
                <MudItem xs="4" sm="1" md="1" Class="d-flex align-center">
                    <MudIconButton Style="height:fit-content" Disabled="@LoadingService.IsLoading" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" />
                </MudItem>
            </MudGrid>
        </MudPaper>
        <br/>
            <MudTable @ref="table" 
                     T="PedidoDTO" 
                     ServerData="ShowList"
                     Class="d-flex flex-column"
                     Style="height: 100%;"
                     FixedHeader="true"
                     FixedFooter="false"
                     Dense="true"
                     Hover="true">

                <HeaderContent>
                    <MudTh Style="font-weight: bold;"># Pedido</MudTh>
                    <MudTh Style="font-weight: bold;">Cantidad de Artículos</MudTh>
                    <MudTh Style="font-weight: bold;">Estado</MudTh>
                    <MudTh Style="font-weight: bold;">Comprador</MudTh>
                    <MudTh Style="font-weight: bold;">Vendedor</MudTh>
                    <MudTh Style="font-weight: bold;">Acciones</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="# Pedido">@context.Id</MudTd>
                    <MudTd DataLabel="Cantidad de Artículos">@context.CantidadArticulos</MudTd>
                    <MudTd DataLabel="Estado">@context.EstadoNombre</MudTd>
                    <MudTd DataLabel="Comprador">@context.NombreComprador</MudTd>
                    <MudTd DataLabel="Vendedor">@context.UsuarioUsername</MudTd>
                    <MudTd DataLabel="Acciones">
                    <MudButtonGroup Size="Size.Small">
                        <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Visibility"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary"/>
                    </MudButtonGroup>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager HideRowsPerPage=true PageSizeOptions="new int[] { 10, 25, 50 }"></MudTablePager>
                </PagerContent>
                <NoRecordsContent>
                    <div class="d-flex flex-column align-center justify-center pa-8">
                        <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.body1">No se encontraron registros.</MudText>
                    </div>
                </NoRecordsContent>
                <LoadingContent>
                    <MudProgressCircular/>
                </LoadingContent>
            </MudTable>
    </MudContainer>
</CustomView>


@code {
    private MudTable<PedidoDTO> table;
    private List<TipoArticuloDTO> tipoArticulos = new List<TipoArticuloDTO>();
    private TipoArticuloDTO tipoSeleccionado { get; set; } = new TipoArticuloDTO { Id = 0, Nombre = "Todos los pedidos" };
    private TipoArticuloDTO tipoDefault = new TipoArticuloDTO { Id = 0, Nombre = "Todos los pedidos" };
    private DateTime? inicio = DateTime.Today;
    private DateTime? fin = DateTime.Today;
    private int CurrentPage;
    private int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        LoadingService.OnLoadingStateChanged += StateHasChanged;
        await LoadTipoArticulos();
    }

    private async Task ReloadTable()
    {
        totalItems = table.GetFilteredItemsCount();
        if (table != null)
        {
            await table.ReloadServerData();
        }
    }

    private async Task<TableData<PedidoDTO>> ShowList(TableState state, CancellationToken token)
    {
        using (LoadingService.LoadingScope())
        {
            PaginacionDTO paginacionDTO = new PaginacionDTO
            {
                GetTotalItems = (totalItems <= 0),
                Page = state.Page,
                RecordsPerPage = state.PageSize,

            };
            ValidacionDTO valid = Utilities.ValidarFechas(inicio, fin);
            if (!valid.EsValido)
            {
                Console.WriteLine(valid.Mensaje);
                return new TableData<PedidoDTO>() { TotalItems = 0, Items = new List<PedidoDTO>() };
            }

            var response = await HttpClient.PostAsJsonAsync("api/Pedido/GetListadoPedidos", new RequestDTO(paginacionDTO, inicio, fin), token);
            if (response.IsSuccessStatusCode)
            {
                var pedidos = await response.Content.ReadFromJsonAsync<ListadoDTO<PedidoDTO>>();
                if (pedidos == null)
                {
                    pedidos = new ListadoDTO<PedidoDTO>();
                }
                return new TableData<PedidoDTO>()
                {
                    TotalItems = pedidos.TotalItems,
                    Items = pedidos.Listado
                };
            }
            return new TableData<PedidoDTO>() { TotalItems = 0, Items = new List<PedidoDTO>() };
        }        
    }


    private async Task LoadTipoArticulos()
    {
        using (LoadingService.LoadingScope())
        {
            try
            {
                tipoSeleccionado = tipoDefault; // Inicializar con el valor por defecto
                var response = await HttpClient.GetAsync("api/Articulo/GetTipoArticulos");
                if (response.IsSuccessStatusCode)
                {
                    tipoArticulos = await response.Content.ReadFromJsonAsync<List<TipoArticuloDTO>>() ?? new List<TipoArticuloDTO>();
                }
                else
                {
                    // Manejar error de la API
                    Console.WriteLine($"Error al cargar tipos de artículos: {response.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                // Manejar excepciones
                Console.WriteLine($"Excepción al cargar tipos de artículos: {ex.Message}");
            }
        }
    }

    public void Dispose()
    {
        LoadingService.OnLoadingStateChanged -= StateHasChanged;
    }
}
