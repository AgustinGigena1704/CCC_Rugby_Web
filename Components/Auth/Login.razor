@page "/Auth/Login"
@layout LoginLayout
@inject CookieService cookieService
@inject AuthService authService
@inject AuthStateProvider authStateProvider
@inject NavigationManager navManager

<MudPaper Style="width: 90%; height: 90%; min-height:500px;" MaxWidth="500px" MaxHeight="90dvh">
    <MudContainer Style="height:100%; width:100%; display:flex; flex-direction:column;">
        <br/>
        <MudText Align="Align.Center" Typo="Typo.h3">Iniciar Sesion</MudText>
        <div class="d-flex justify-center">
            <MudImage Style="max-width:80%;" Class="my-4" Src="images\ciudad_de_campana.png"></MudImage>
        </div>
        <MudForm Model="@loginDTO" @ref="form" Class="mt-4">
            <MudFocusTrap Disabled="true" DefaultFocus="DefaultFocus.FirstChild">
                <MudTextField @bind-Value="loginDTO.Username" For="@(() => loginDTO.Username)" Label="Correo / Usuario" />
                <br />
                <MudTextField @bind-Value="loginDTO.Password" For="@(() => loginDTO.Password)" Label="Contraseña" InputType="@passwordInput" OnAdornmentClick="TogglePasswordVisibility" Adornment="Adornment.End" AdornmentIcon="@passwordIcon" />
                <br />
                <MudButton Variant="Variant.Filled" OnClick="@HandleLogin" Color="Color.Primary">
                    Login
                </MudButton>
                <br />
            </MudFocusTrap>
        </MudForm>
        @if (LoadingService.IsLoading)
        {
            <MudProgressLinear Color="Color.Primary"
                Indeterminate="true"
                Class="my-7 text-center" 
            />
        }
    </MudContainer>
</MudPaper>

@code {
    private MudForm form;
    private LoginDTO loginDTO = new LoginDTO();
    private InputType passwordInput = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;
    [Parameter][SupplyParameterFromQuery] public string? ReturnUrl { get; set; }

    void TogglePasswordVisibility()
    {
        if (passwordInput == InputType.Password)
        {
            passwordInput = InputType.Text;
            passwordIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            passwordInput = InputType.Password;
            passwordIcon = Icons.Material.Filled.VisibilityOff;
        }
        StateHasChanged();
    }

    private async Task HandleLogin()
    {
        if (!LoadingService.IsLoading)
        {
            LoadingService.StartLoading();
            StateHasChanged();
            await Task.Yield();
            await form.Validate();
            if (form.IsValid)
            {
                try
                {
                    var user = await authService.LoginAsync(loginDTO);
                    if (user != null)
                    {
                        await authStateProvider.AuthenticateUser(user);
                        var returnUrl = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
                        navManager.NavigateTo(returnUrl);
                    }
                }
                catch (Exception ex)
                {
                    NotificationService.ShowError($"Error al iniciar sesión: {ex.Message}");
                    LoadingService.StopLoading();
                }
            }
            LoadingService.StopLoading();
        }
    }
}
