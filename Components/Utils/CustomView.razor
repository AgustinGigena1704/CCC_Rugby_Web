@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

<AuthorizeView Roles="@CombinedRoles">
    <Authorized>
        <CascadingAuthenticationState>
            @ChildContent
        </CascadingAuthenticationState>
    </Authorized>
    <NotAuthorized>
        @if (NotAuthorizedContent != null)
        {
            <CascadingAuthenticationState>
                @NotAuthorizedContent
            </CascadingAuthenticationState>
        }
        else
        {
            <div class="unauthorized">
                <h3>No autorizado</h3>
                <p>Lo sentimos, no tienes permiso para ver esta página.</p>
                <p>Por favor, contacta al administrador si crees que esto es un error.</p>
            </div>
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public string Roles { get; set; } = "";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? NotAuthorizedContent { get; set; }

    private string CombinedRoles
    {
        get
        {
            var rolesList = new List<string> { "Admin" };

            if (!string.IsNullOrEmpty(Roles))
            {
                var additionalRoles = Roles.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                          .Select(r => r.Trim())
                                          .Where(r => !string.IsNullOrEmpty(r));
                rolesList.AddRange(additionalRoles);
            }

            return string.Join(",", rolesList);
        }
    }
}